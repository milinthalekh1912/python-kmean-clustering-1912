from cProfile import label
from email.policy import default
import string
from traceback import print_tb
from unittest import result
from matplotlib import pyplot as plt
import pandas as pd
from pygments import highlight
from sklearn.preprocessing import LabelEncoder
from sklearn.decomposition import PCA
import numpy as np
from pyexpat import model
from sklearn.cluster import KMeans
from sympy import Intersection, centroid


def intersection(lst1, lst2):
    lst3 = [value for value in lst1 if value in lst2]
    return lst3


phy = [
    "ธรรมชาติ และพัฒนาการทางฟิสิกส์",
    "การเคลื่อนที่แนวตรง",
    "แรงและกฎการเคลื่อนที่",
    'สมดุลกล', "งานและพลังงาน",
    "โมเมนตัม และการชน",
    "การเคลื่อนที่แนวโค้ง",
    "การเคลื่อนที่แบบฮาร์มอนิกอย่างง่าย",
    "คลื่น", "แสงเชิงคลื่น, แสงเชิงรังสี",
    "เสียง", "ไฟฟ้าสถิต", "ไฟฟ้ากระแส",
    "แม่เหล็กและไฟฟ้า", "ความร้อนและแก๊ส",
    "ของแข็ง และของไหล",
    "ฟิสิกส์ อะตอม",
    "ฟิสิกส์นิวเคลียร์ และฟิสิกส์อนุภาค"
]
sta = [
    "ตำแหน่งที่ของข้อมูล",
    "ค่ากลาง ฐานนิยม มัธยฐาน ค่าเฉลี่ยเลขคณิต",
    "ค่าการกระจาย พิสัย ส่วนเบี่ยงเบนมาตรฐาน ความแปรปรวน",
    "การนำเสนอข้อมูลเชิงคุณภาพและเชิงปริมาณ",
    "การแปลความหมายของค่าสถิติ",
]
jakjang = [
    "การแจกแจงเอกรูป",
    "การแจกแจงทวินาม",
    "การแจกแจงปกติ",
]
cms = [
    "โครงสร้างอะตอม",
    "แนวโน้มตารางธาตุ",
    "พันธะเคมี",
    "ปริมาณสารสัมพันธ์",
    "แก๊ส ของเหลว ของแข็ง",
    "อัตราการเกิดปฏิกิริยา",
    "สมดุลเคมี",
    " กรด – เบส",
    "เคมีไฟฟ้า",
    "เคมีอินทรีย์",
    "สารชีวโมเลกุล",
    "ผลิตภัณฑ์ปิโตรเคมี และพอลิเมอร์",
]
order = [
    "ลำดับจำกัดและลำดับอนันต์",
    "ลำดับเลขคณิตและลำดับเรขาคณิต",
    "ลิมิตของลำดับอนันต์",
    "อนุกรมจำกัดและอนุกรมอนันต์",
    "อนุกรมเลขคณิตและอนุกรมเรขาคณิต",
    "ผลบวกอนุกรมอนันต์",
    "การนำความรู้เกี่ยวกับลำอนุกรมไปใช้ในการแก้ปัญหา",

]
cal = [
    "ลิมิตและความต่อเนื่องของฟังก์ชัน",
    "อนุพันธ์ของฟังก์ชันพีชคณิต",
    "ปริพันธ์ของฟังก์ชันพีชคณิต",
]
bio = [
    "พื้นฐานทางชีววิทยา",
    "เคมีพื้นฐานของสิ่งมีชีวิต",
    "ปฏิกิริยาเคมีของสิ่งมีชีวิต",
    "เซลล์ : โครงสร้างการลำเลียงสาร และการสื่อสารของเซลล์",
    "การแบ่งเซลล์",
    "การสลายอาหารระดับเซลล์",
    "การถ่ายทอดทางพันธุกรรม",
    "เทคโนโลยีชีวภาพ",
    "วิวัฒนาการ",
    "โครโมโซม และสารพันธุกรรม",
    "การสืบพันธ์ของพืชดอก",
    "โครงสร้างพืช และการเจริญเติบโตของพืช",
    "การลำเลียงสารของพืช",
    "การสังเคราะห์ด้วยแสง",
    "การตอบสนองต่อสิ่งเร้าของพืช",
    "ระบบย่อยอาหาร",
    "ระบบลำเลียง และภูมิคุ้มกัน",
    "การขับถ่าย และรักษาดุลยภาพ",
    "ระบบแลกเปลี่ยนแก๊สของสัตว์",
    "การเคลื่อนที่ของสัตว์",
    "ระบบประสาท",
    "ระบบฮอร์โมน",
    "ระบบสืบพันธุ์ และการเจริญเติบโตของสัตว์",
    "พฤติกรรมของสัตว์",
    "การเคลื่อนที่ของสัตว์",
    "ระบบประสาท",
    "ระบบฮอร์โมน",
    "ระบบสืบพันธุ์ และการเจริญเติบโตของสัตว์",
    "พฤติกรรมของสัตว์",
    "ความหลากหลายทางชีวภาพ",
    "ระบบนิเวศ",
    "ประชากรสิ่งมีชีวิต",
]
geo = [
    "เวกเตอร์",
    "จุดและเส้นตรง",
    "วงกลม",
    "พาราโบลา",
    "วงรี",
    "ไฮเพอร์โบลา"
]
se = [
    "ความรู้เบื้องต้นและความรู้เบื้องต้นและสัญลักษณ์พื้นฐานเกี่ยวกับเซต",
    "ยูเนียน อินเตอร์เซกชันและคอมพลีเมนต์ของเซต"
]
log = [
    "ประพจน์และตัวเชื่อม",
    "ประโยคที่มีตัวบ่งปริมาณตัวเดียว",
    "การอ้างเหตุผล"
]
rael = [
    "จำนวนจริงและสมบัติของจำนวนจริง",
    "ค่าสัมบูรณ์ของจำนวนจริงและสมบัติของค่าสัมบูรณ์ของจำนวนจริง",
    "จำนวนจริงในรูปกรณฑ์ในรูปเลขยกกำลัง",
    "ตัวประกอบของพหุนาม",
    "สมการและอสมการพหุนาม",
    "สมการและอสมการเศษส่วนของพหุนาม",
    "สมการและอสมการค่าสัมบูรณ์ของพหุนาม",
]
fun = [
    "ฟังก์ชันเอกซ์โพเนนเชียล",
    "ฟังก์ชันลอการิทึม",
    "สมการเอกซ์โพเนนเชียล และสมการลอการิทึม",
    "ฟังก์ชันและกราฟ",
    "การบวก การลบ การคูณ การหารฟังก์ชัน",
    "ฟังก์ชันประกอบ",
    "ฟังก์ชันผกผัน",
]
funcGeo = [
    "ฟังก์ชันตรีโกณมิติ",
    "ฟังก์ชันตรีโกณมิติผกผัน",
    "เอกลักษณ์และสมการตรีโกณมิติ",
    "กฎของโคไซน์และกฎของไซน์",
]
numOver = [
    "จำนวนเชิงซ้อนและสมบัติของจำนวนเชิงซ้อน",
    "จำนวนเชิงซ้อนในรูปเชิงขั้ว",
    "รากที่ n ของจำนวนเชิงซ้อน เมื่อ n เป็นจำนวนนับที่มากกว่า 1"
]
mar = [
    "เมทริกซ์และเมทริกซ์สลับเปลี่ยน",
    "การบวกเมทริกซ์การคูณเมทริกซ์กับจำนวนจริง การคูณระหว่างเมทริกซ์",
    "ดีเทอร์มิแนนต์",
    "เมทริกซ์ผกผัน",
    "การแก้ระบบสมการเชิงเส้นโดยใช้เมทริกซ์"
]
vec3 = [
    "เวกเตอร์นิเสธของเวกเตอร์",
    "การบวกการลบเวกเตอร์",
    "การคูณเวกเตอร์ด้วยสเกลาร์ ผลคูณเชิงสเกลาร์ ผลคูณเชิงเวกเตอร์"
]
countTe = [
    "หลักการบวกและการคูณ",
    "การเรียงสับเปลี่ยน การเรียงสับเปลี่ยนเชิงเส้น การเรียงสับเปลี่ยน",
    "การจัดหมู่กรณีที่สิ่งของแตกต่างกันทั้งหมด",
    "ทฤษฎีบททวินาม"
]
prob = [
    "การทดลองสุ่มและเหตุการณ์",
    "ความน่าจะเป็นของเหตุการณ์"
]

df = pd.read_excel('googleForm.xlsx')
df = df[['ฟิสิกส์', 'สถิติ', 'การแจกแจงความน่าจะเป็นเบื้องต้น',
         'เคมี', 'ลำดับและอนุกรม', 'แคลคูลัส', 'ชีวะ', 'เรขาคณิตวิเคราะห์',
         'เซต', 'ตรรกศาสตร์', 'จำนวนจริงและพหุนาม', 'ฟังก์ชัน',
         'ฟังก์ชันตรีโกณมิติ', 'จำนวนเชิงซ้อน', 'เมทริกซ์', 'เวกเตอร์ในสามมิติ',
         'หลักการนับเบื้องต้น', 'ความน่าจะเป็น', 'สาขาคอมพิวเตอร์ที่จบ']]


phy_len = len(phy)
sta_len = len(sta)
jakjang_len = len(jakjang)
cms_len = len(cms)
order_len = len(order)
cal_len = len(cal)
bio_len = len(bio)
geo_len = len(geo)
se_len = len(se)
log_len = len(log)
rael_len = len(rael)
fun_len = len(fun)
funcGeo_len = len(funcGeo)
numOver_len = len(numOver)
mar_len = len(mar)
vec3_len = len(vec3)
countTe_len = len(countTe)
prob_len = len(prob)

setPhy = []
count = 1
dfNew = pd.DataFrame()
newList = df.values.tolist()
#=IF(X7="Computer science","CS",IF(X7="Computer Engineer","CE",IF(X7="Software Engineer","SE",IF(X7="Information Technology","IT",IF(X7="Business Computer","BC",0)))))
head = 17
for i in range(0, len(newList)):
    item = str(newList[i][head])
    leng = len(intersection(prob, item))
    if item == 'nan':
        leng = 0
    #print(str(i)+ " : "  +item + " : " + str(leng) + " : " + str(leng/prob_len))
    print(str(leng/prob_len))
    if(leng > 0):
        setPhy.append(leng/prob_len)

# for i in setPhy:
#     print(i)
# setPhy = []
# for i in newList[0]:
#     data = str(i)
#     print(data+ " : " + str(len(intersection(phy, data))/phy_len))
# print(len(intersection(phy, newList[0])))
